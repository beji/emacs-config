:DOC-CONFIG:
# tangle by default to config.el, the most common case
#+property: header-args:emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+TITLE: Doom Emacs configuration

* How do I build this?

#+begin_src emacs-lisp :tangle no :results output silent
(org-babel-tangle)
#+end_src

* Doom config

** File headers

Default file headers, provided as-is from doom

#+caption: File header for init.el
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

(setq package-native-compile t)

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src

#+caption: File header for packages.el
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; This is where you install packages, by declaring them with the `package!'
;; macro, then running 'doom refresh' on the command line. You'll need to
;; restart Emacs for your changes to take effect! Or at least, run M-x
;; `doom/reload'.
;;
;; WARNING: Don't disable core packages listed in ~/.emacs.d/core/packages.el.
;; Doom requires these, and disabling them may have terrible side effects.
;;
;; Here are a couple examples:

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
                                        ;(package! some-package)

;; To install a package directly from a particular repo, you'll need to specify
;; a `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
                                        ;(package! another-package
                                        ;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
                                        ;(package! this-package
                                        ;  :recipe (:host github :repo "username/repo"
                                        ;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, for whatever reason,
;; you can do so here with the `:disable' property:
                                        ;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
                                        ;(package! builtin-package :recipe (:nonrecursive t))
                                        ;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
                                        ;(package! builtin-package :recipe (:branch "develop"))
#+end_src

#+caption: File header for config.el
#+begin_src emacs-lisp
;;; ~/.doom.d/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here

;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; refresh' after modifying this file!


;; These are used for a number of things, particularly for GPG configuration,
;; some email clients, file templates and snippets.
#+end_src

** Doom packages

#+begin_src emacs-lisp :tangle init.el
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;(ivy               ; a search engine for love and life
       ;; +fuzzy)
       (vertico +icons)

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink the current line after jumping
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; a consistent, cross-platform shell (WIP)
       ;;shell             ; a terminal REPL for Emacs
       ;;term              ; terminals in Emacs
       vterm             ; another terminals in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       (debugger +lsp)          ; FIXME stepping through code, to help you add bugs
       direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       taskrunner        ; taskrunner for all your projects
       terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       (:if IS-LINUX (cc +lsp))                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       (elixir +lsp)            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;go                ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       ;;json              ; At least it ain't XML
       (java +lsp)
       (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +pomodoro +roam2)     ; organize your plain life in plain text
       ;;perl              ; write code no one else can comprehend
       ;;php               ; perl's insecure younger brother
       (:if IS-MAC plantuml)          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;ruby              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       (:if IS-MAC (sh +lsp))                ; she sells {ba,z,fi}sh shells on the C xor
       (:if IS-LINUX sh)
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       (:if IS-LINUX (zig +lsp))  ; custom zig lang module

       :email
       (:if IS-LINUX mu4e)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

** Generic stuff

A macro to do stuff depending on OS

#+name: with-system-macro
#+begin_src emacs-lisp :tangle no
(defmacro with-system (type &rest body)
  "Evaluate BODY if `system-type' equals TYPE."
  (declare (indent defun))
  `(when (eq system-type ',type)
     ,@body))
#+end_src

#+begin_src emacs-lisp :noweb yes
<<with-system-macro>>
#+end_src

#+begin_src emacs-lisp :noweb yes :tangle packages.el
<<with-system-macro>>
#+end_src

First set up some general user info stuff.

#+begin_src emacs-lisp
(with-system darwin
             (setq user-full-name "BjÃ¶rn Erlwein"
                   user-mail-address "bjoern.erlwein@empiriecom.com"))
(with-system gnu/linux
             (setq user-full-name "BjÃ¶rn Erlwein"
                   user-mail-address "bjoernerlwein@gmail.com"))
#+end_src

The font I currently like.

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Hack" :size 13))
#+end_src

Enable line numbers everywhere.

#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

This defines where projectile searches for projects to import.

#+begin_src emacs-lisp
(with-system darwin
  (setq projectile-project-search-path '("~/projects/")))
#+end_src

=Evil= uses =ESC= by default but that key doesn't exist on my mac...

#+begin_src emacs-lisp
(setq! evil-escape-key-sequence "jj")
#+end_src

** Email configuration stuff
#+begin_src emacs-lisp
(with-system gnu/linux
  ;; Each path is relative to `+mu4e-mu4e-mail-path', which is ~/.mail by default
  (use-package! mu4e
    :config
    (set-email-account! "bjoernerlwein.de"
                        '((mu4e-sent-folder       . "/bjoernerlweinde/Sent")
                          (mu4e-drafts-folder     . "/bjoernerlweinde/Drafts")
                          (mu4e-trash-folder      . "/bjoernerlweinde/Trash")
                          (mu4e-refile-folder     . "/bjoernerlweinde/All Mail")
                          (smtpmail-smtp-user     . "bjoern@bjoernerlwein.de")
                          (smtpmail-smtp-server   . "hosted.mailcow.de")
                          (smtpmail-servers-requiring-authorization . ".+")
                          (starttls-use-gnutls    . t)
                          (starttls-gnutls-program . "gnutls-cli")
                          (starttls-extra-arguments . nil)
                          (smtpmail-stream-type .   ssl)
                          (smtpmail-smtp-service  . 465)
                          (user-mail-address      . "bjoern@bjoernerlwein.de")    ;; only needed for mu < 1.4
                          (mu4e-compose-signature . "\nBjÃ¶rn Erlwein"))
                        t)
    ))
#+end_src

** Mac OS configurations

I need to write special keys that use the option/command keys but Emacs blocks them by default with keybinds. So the right keys are unbound here.

- Left keys: Emacs stuff
- Right keys: Os stuff

This also sets the fullscreen mode to native to support the macos fullscreen stuff.

#+begin_src emacs-lisp
(with-system darwin
             (setq ns-right-option-modifier 'none ;; default emacs
                   ns-right-command-modifier 'none ;; default emacs
                   mac-right-option-modifier 'none ;; emacs mac port
                   mac-right-option-modifier 'none ;; emacs mac port
                   mac-option-modifier 'meta
                   ns-use-native-fullscreen t))
#+end_src

** Linux/Gentoo configuration

For whatever reason these don't work correctly on my gentoo WSL system...

#+begin_src emacs-lisp
(with-system gnu/linux
  (require 'iso-transl)
  (global-set-key [S-dead-grave] "`")
  (global-set-key [dead-acute] "Â´")
  (global-set-key [dead-circumflex] "^")
  (setq
   cmdExeBin"/mnt/c/Windows/System32/cmd.exe"
   cmdExeArgs '("/c" "start" "") )
  (setq
   browse-url-generic-program  cmdExeBin
   browse-url-generic-args     cmdExeArgs
   browse-url-browser-function 'browse-url-generic))
#+end_src

** General Java Madness
#+begin_src emacs-lisp
(with-system darwin
  (use-package! lsp-java
    :config
    (setq lsp-java-import-maven-enabled t
          lsp-java-maven-download-sources t)
    ))
#+end_src
** Add more file endings to random modes

#+begin_src emacs-lisp
(use-package! vcl-mode
  :config
  (add-to-list 'auto-mode-alist (cons (purecopy "\\.vtc\\'") 'vcl-mode)))

(use-package! yaml-mode
  :config
  (add-to-list 'auto-mode-alist (cons (purecopy "\\.yml\\'") 'yaml-mode)))

(use-package! web-mode
  :config
  (add-to-list 'auto-mode-alist (cons (purecopy "\\.isml\\'") 'web-mode)))

#+end_src

** Custom packages
*** git-auto-commit
#+begin_src emacs-lisp :tangle packages.el
(package! git-auto-commit-mode)
#+end_src

#+begin_src emacs-lisp
(setq-default gac-automatically-add-new-files-p t)
#+end_src

*** VCL mode

Provides syntax highlights for varnish.

#+begin_src emacs-lisp :tangle packages.el
(package! vcl-mode)
#+end_src

=vcl-mode= doesn't work on =vtc= files for varnish tests by default.

#+begin_src emacs-lisp
(use-package! vcl-mode
  :config
  (add-to-list 'auto-mode-alist (cons (purecopy "\\.vtc\\'") 'vcl-mode)))
#+end_src

*** add-node-modules-path

Automatically add the =node_modules= folder to =PATH=.

#+begin_src emacs-lisp :tangle packages.el
(package! add-node-modules-path)
#+end_src

#+begin_src emacs-lisp
(add-hook! web-mode 'add-node-modules-path)
(add-hook! js2-mode 'add-node-modules-path)
(add-hook! typescript-mode 'add-node-modules-path)
(add-hook! yaml-mode 'add-node-modules-path)
#+end_src

*** prettier-js

Prettier integration on save

#+begin_src emacs-lisp :tangle packages.el
(package! prettier-js)
#+end_src

#+begin_src emacs-lisp
(add-hook! web-mode 'prettier-js-mode)
(add-hook! js2-mode 'prettier-js-mode)
(add-hook! typescript-mode 'prettier-js-mode)
(add-hook! yaml-mode 'prettier-js-mode)
#+end_src

*** fireplace

Makes a nice fireplace animation

#+begin_src emacs-lisp :tangle packages.el
(package! fireplace)
#+end_src

*** ox-twbs

#+begin_src emacs-lisp :tangle packages.el
(package! ox-twbs)
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(with-system darwin
  (package! adoc-mode))
#+end_src

#+begin_src emacs-lisp
(with-system darwin
  (use-package! adoc-mode
    :config
    (add-to-list 'auto-mode-alist (cons "\\.adoc\\'" 'adoc-mode))))
#+end_src
** LSP config

LSP sets up the file watches kind of weirdly on my mac, try to improve this by ignoring certain things

#+begin_src emacs-lisp
(with-system darwin
  (use-package! lsp-mode
    :config
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.direnv\\'")
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]solace\\'")
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.terraform\\'")
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.vagrant\\'")
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]cp-ansible\\'")
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]python3\\.9\\'")))
#+end_src
** PlantUML
the mode offers a function to indent a line but not a whole buffer. It also doesn't react on =.puml= files

#+begin_src emacs-lisp
(with-system darwin
  (defun zz/plantuml-indent-all-lines ()
    (interactive)
    (goto-char (point-min))
    (while (not (eobp))
      (plantuml-indent-line)
      (forward-line 1)))
  (use-package! plantuml-mode
    :config
    (add-to-list 'auto-mode-alist (cons (purecopy "\\.puml\\'") 'plantuml-mode))))
#+end_src
* Org mode
** setup folders
Set default directories for =org=, =org-agenda= and =org-roam=.

#+begin_src emacs-lisp
(setq org-directory "~/Documents/org/"
      org-agenda-files '("~/Documents/org-agenda/")
      org-roam-directory "~/notes")
#+end_src
** org-clock

A great tool for time keeping, with automated upload to jira thanks to =ejira=.
Persist the clock through restarts.

#+begin_src emacs-lisp
(after! org-clock
  (setq org-duration-format (quote h:mm))
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate))
#+end_src

** ox-jira

Conversion from org syntax to jira syntax.

#+begin_src emacs-lisp :tangle packages.el
;; straight expects a master branch that this doesn't have
(package! ox-jira :recipe (:branch "trunk"))
#+end_src

** ejira

Jira issues integration for =org= and =org-agenda=. This isn't on MELPA yet so it is pulled from github directly. Only activate this on macOs as my private system doesn't need this.

#+begin_src emacs-lisp :tangle packages.el
;;(with-system darwin
;;  (package! ejira :recipe (:host github :repo "nyyManni/ejira")))
#+end_src

#+begin_src emacs-lisp
(with-system darwin
  (use-package! alert
    :config
    (setq alert-default-style 'osx-notifier)))
#+end_src

#+begin_src emacs-lisp
;; (with-system darwin
;;   (use-package! ejira
;;     :init
;;     (setq org-id-track-globally t
;;           jiralib2-url              "https://jira.empirie.com"
;;           jiralib2-auth             'basic
;;           jiralib2-user-login-name  "berlwein"
;;           jiralib2-token            nil

;;           ejira-org-directory       "~/Documents/jira"
;;           ejira-main-project        "NCO"
;;           ejira-projects            '("NCO" "RMK" "HDR" "INSPECT" "ISA" "ORDER")
;;           )
;;     :config
;;     (setq
;;      ejira-epic-field 'customfield_1006
;;      ejira-sprint-field 'customfield_10005
;;      ejira-epic-summary-field 'customfield_10007

;;      ;; for some reason the hour logs are one hour off
;;      ejira-hourmarking-step 60

;;      ejira-todo-states-alist   '(("Ready to Start"       . 1)
;;                                  ("in Progress" . 4)
;;                                  ("Waiting Internal" . 5)
;;                                  ("To be tested" . 8)
;;                                  ("Done"        . 8)
;;                                  ("Closed" . 8))
;;      ejira-scrum-project "NCO")

;;     ;; Make the issues visisble in your agenda by adding `ejira-org-directory'
;;     ;; into your `org-agenda-files'.
;;     (add-to-list 'org-agenda-files ejira-org-directory)
;;     (require 'ejira-agenda)))
#+end_src

A custom command to look at issues assigned to me.

#+begin_src emacs-lisp
;; (with-system darwin
;;              (org-add-agenda-custom-command
;;               '("c" "Jira issues assigned to me"
;;                 ((ejira-jql "assignee = currentUser() AND resolution = Unresolved order by updated DESC"
;;                             ((org-agenda-overriding-header "Assigned to me")))
;;                  (ejira-jql "reporter = currentUser() AND resolution = Unresolved order by updated DESC"
;;                             ((org-agenda-overriding-header "Created by me")))
;;                  (ejira-jql "domain =\"Order\"  and  issuetype = \"Daily Business\" and resolution = Unresolved ORDER BY created DESC"
;;                             ((org-agenda-overriding-header "Daily business tickets")))))))
#+end_src

*** How to push =org-clock= stuff to Jira.
Run =ejira-hourmarking-get-hourlog= and then =C-c C-c=

** pomodoro

#+begin_src emacs-lisp
(defun zz/org-get-clock-segment-timestamps (line)
  "Parses a clock segment line and returns the first and last timestamps in a list."
  (let* ((org-clock-regexp (concat "CLOCK: " org-ts-regexp3 "--" org-ts-regexp3))
         (t1 (if (string-match org-clock-regexp line)
                 (match-string 1 line)
               (user-error "The argument must have a valid CLOCK range")))
         (t2 (match-string 9 line)))
    (list t1 t2)))

(defun zz/org-compute-timestamp-difference (later-timestamp earlier-timestamp)
  "Computes the number of seconds difference in string timestamps as a float."
  (-
   (float-time (apply #'encode-time (org-parse-time-string later-timestamp)))
   (float-time (apply #'encode-time (org-parse-time-string earlier-timestamp)))))

(defun zz/org-float-time-diff-to-hours-minutes (diff)
  "Returns a float time difference in hh:mm format."
  (let* ((hours (floor (/ diff 3600)))
         (diff_minus_hours (- diff (* 3600 hours)))
         (minutes (floor (/ diff_minus_hours 60))))
    (car (split-string (format "%2d:%02d" hours minutes)))))

(defun zz/org-clock-merge (&optional skip-merge-with-time-discrepancy)
  "Merge the org CLOCK line with the next CLOCK line. If the last
timestamp of the current line equals the first timestamp of the
next line with a tolerance of up to 2 minutes, then merge
automatically. If a discrepancy exists, prompt the user for
confirmation, unless skip-merge-with-time-discrepancy is
non-nil."

  (interactive "P")
  (let* ((first-line-start (line-beginning-position))
         (first-line (buffer-substring
                      (line-beginning-position) (line-end-position)))
         (first-line-timestamps (zz/org-get-clock-segment-timestamps first-line))
         (first-line-t1 (pop first-line-timestamps))
         (first-line-t2 (pop first-line-timestamps))
         (first-line-t2 (match-string 9 first-line))
         (second-line (progn
                        (forward-line)
                        (buffer-substring
                         (line-beginning-position) (line-end-position))))
         (second-line-timestamps (zz/org-get-clock-segment-timestamps second-line))
         (second-line-t1 (pop second-line-timestamps))
         (second-line-t2 (pop second-line-timestamps))
         (diff (zz/org-compute-timestamp-difference first-line-t1 second-line-t2)))

    ;; ignore discrepancies of 2 minutes or less
    (when (> diff 120)
      (when skip-merge-with-time-discrepancy
        (error "Skipping clock-merge"))
      (unless (yes-or-no-p (concat (zz/org-float-time-diff-to-hours-minutes diff)
                                   " discrepancy in times to merge. Proceed anyway?"))
        (user-error "Cancelled zz/org-clock-merge")))

    ;; remove the two lines
    (delete-region first-line-start (line-end-position))
    ;; insert new time range
    (insert (concat "CLOCK: [" second-line-t1 "]--[" first-line-t2 "]"))
    ;; generate duration
    (org-ctrl-c-ctrl-c)))

(defun zz/org-try-merging-last-clock-out ()
  "Try to merge the latest clock-out, and catch the error if the discrepancy is not zero."
  (save-excursion
    (org-save-outline-visibility t
      (progn
        (org-clock-goto)
        (search-forward org-last-inserted-timestamp)
        (condition-case nil
            (zz/org-clock-merge t)
          (error))
        ))))

(with-system darwin
  (use-package! org-pomodoro
    :config
    (add-hook 'org-clock-out-hook #'zz/org-try-merging-last-clock-out)
    (setq org-pomodoro-play-sounds t
          org-pomodoro-keep-killed-pomodoro-time t
          org-pomodoro-clock-break t
          org-pomodoro-long-break-length 10)))
#+end_src
