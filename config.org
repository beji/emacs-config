:DOC-CONFIG:
# tangle by default to init.el, the most common case
#+property: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+title: Emacs Config

* How do I build this?

#+begin_src emacs-lisp :tangle no :results output silent
  (org-babel-tangle)
#+end_src

* Early init
The early init goes into =early-init.el=. It runs before =init.el= and is used to set up some startup stuff

** Increase startup speed
=gc-cons-threshold= reduces garbage collection runs, this should improve the user experience but requires more memory

#+begin_src emacs-lisp :tangle early-init.el
  (setq gc-cons-threshold 10000000)
#+end_src

** Decrease spam
Remove obsolete files from the =byte-compile-warnings=, this generally doesn't matter as the files will get compiled.

#+begin_src emacs-lisp :tangle early-init.el
  (setq byte-compile-warnings '(not obsolete))
#+end_src

Remove messages about compilation, none of that matters.

#+begin_src emacs-lisp :tangle early-init.el
  (setq warning-suppress-log-types '((comp) (bytecomp)))
  (setq native-comp-async-report-warnings-errors 'silent)
#+end_src

** Remove UI clutter

Disable the tool bar and the menu bar

#+begin_src emacs-lisp :tangle early-init.el
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

** UI Improvements

#+begin_src emacs-lisp :tangle early-init.el
  (setq default-frame-alist '((fullscreen . maximized)

			      ;; You can turn off scroll bars by uncommenting these lines:
			      (vertical-scroll-bars . nil)
			      (horizontal-scroll-bars . nil)

			      ;; Setting the face in here prevents flashes of
			      ;; color as the theme gets activated
			      (background-color . "#000000")
			      (foreground-color . "#FFFFFF")
			      (ns-appearance . dark)
			      (ns-transparent-titlebar . t)
			      '(undecorated-round . t)
			      ))

  (setq ns-right-option-modifier 'none ;; default emacs
	ns-right-command-modifier 'none ;; default emacs
	mac-right-option-modifier 'none ;; emacs mac port
	mac-right-option-modifier 'none ;; emacs mac port
	mac-option-modifier 'meta
	ns-use-native-fullscreen t)
#+end_src

* Define some useful constants
#+begin_src emacs-lisp :tangle init.el
  (defconst IS-MAC      (eq system-type 'darwin))
  (defconst IS-LINUX    (memq system-type '(gnu gnu/linux gnu/kfreebsd berkeley-unix)))
  (defconst IS-WINDOWS  (memq system-type '(cygwin windows-nt ms-dos)))
  (defconst IS-BSD      (memq system-type '(darwin berkeley-unix gnu/kfreebsd)))
  (defconst LEADER-KEY "<SPC>")
#+end_src

* Helper functions to load modules

** Load modules for the fake module system

#+begin_src emacs-lisp :tangle init.el
  (defun zz/load-module (fpath)
    "Loads a custom module in the users emacs directory"
    (load-file (expand-file-name fpath user-emacs-directory)))
#+end_src

** Remove trailing whitespace from the buffers lines
#+begin_src emacs-lisp :tangle init.el
  (defun zz/rm-trailing-spaces ()
    "Remove spaces at ends of all lines"
    (interactive)
    (save-excursion
      (let ((current (point)))
	(goto-char 0)
	(while (re-search-forward "[ \t]+$" nil t)
	  (replace-match "" nil nil))
	(goto-char current))))
#+end_src

Run that on every save
#+begin_src emacs-lisp :tangle init.el
  (add-hook 'after-save-hook 'zz/rm-trailing-spaces)
#+end_src
* Set up use-package

=use-package= only uses GNU ELPA by default, enable MELPA as well

#+begin_src emacs-lisp :tangle init.el
  (with-eval-after-load 'package
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
#+end_src

** Automated package updates

This will automatically update packages every =4= days

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/auto-update.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/auto-update.el
  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t
	  auto-package-update-interval 4)
    (auto-package-update-maybe))
#+end_src

* Configure backup files
Emacs will create backup files by default. These usually litter a project. Create these in a predefined directory

#+begin_src emacs-lisp :tangle init.el
  (defun zz/backup-file-path (fpath)
    "Moves emacs backup files to a predefined directory"
    (let* ((backupRootDir "~/.emacs.d/emacs-backup/")
	   (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path
	   (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") )))
      (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
      backupFilePath))
#+end_src

Enable the backup path function

#+begin_src emacs-lisp :tangle init.el
  (setq make-backup-file-name-function 'zz/backup-file-path)
#+end_src

* Theming

#+begin_src emacs-lisp :tangle init.el
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-nord-aurora t)
    (doom-themes-org-config))

  (set-face-attribute 'default t :font "Hack 13")
#+end_src

* Enable line numbers
#+begin_src emacs-lisp :tangle init.el
  (use-package emacs
    :hook (prog-mode . display-line-numbers-mode))
#+end_src

* Modeline
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/modeline.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/modeline.el
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+end_src

* which-key

Displays key bindings for incomplete commands. Really useful for discovery

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/which-key.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/which-key.el
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src

* Org Mode

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/org-mode.el")
#+end_src

Ensure the package is installed
#+begin_src emacs-lisp :tangle modules/org-mode.el
  (use-package org
    :ensure t
    :config
    (setq org-directory "~/Documents/org/"))
#+end_src

Only expand content by default, not properties

#+begin_src emacs-lisp :tangle modules/org-mode.el
  (use-package org
    :ensure t
    :config
    (setq org-startup-folded "content"))
#+end_src

Add org-roam and set up the base directory

#+begin_src emacs-lisp :tangle modules/org-mode.el
  (use-package org-roam
    :ensure t
    :config
    (setq org-roam-directory "~/notes"))
#+end_src

Load org-passwords for some nice password management

#+begin_src emacs-lisp :tangle modules/org-mode.el
  (require 'org-passwords (expand-file-name "modules/org-passwords.el" user-emacs-directory))
  (setq
   org-passwords-file "~/.org-password/store.org.gpg"
   epg-pinentry-mode 'loopback)
#+end_src

* VIM Emulation
Emacs is nice. VIM is nice. Insert "why not both" meme here.

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/vim.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/vim.el
  (use-package evil
    :ensure t
    :init
    (setq
     evil-respect-visual-line-mode t
     evil-undo-system 'undo-redo
     evil-want-keybinding nil)
    :config
    (evil-mode))
#+end_src

* Some nice shortcuts

**NOTE**: This requires the vim module to be loaded!

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/shortcuts.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/shortcuts.el
  (use-package evil-leader
    :ensure t
    :after evil
    :init
    (global-evil-leader-mode)
    :config
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "<SPC>" 'project-switch-project
      "." 'project-find-file
      "g" 'magit-status
      "s" 'consult-line
      "p s" 'consult-git-grep
      "p e" 'project-eshell
      "t s" 'zz/flyspell-toggle
      "b k" 'kill-current-buffer
      "n r f" 'org-roam-node-find
      "n r i" 'org-roam-node-insert
      "a" 'embark-act
      "e a" 'embark-act
      "e b" 'embark-bindings
      "e d" 'embark-dwim))
#+end_src

* Minibuffers

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/minibuffers.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/minibuffers.el
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
  (use-package vertico-directory
    :after vertico)
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))
  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless)))
  (use-package consult
    :ensure t)
  (use-package embark
    :ensure t
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    )
  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* Eshell enhancements
Eshell is already pretty nice, it just needs some better syntax highlighting

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/eshell.el")
#+end_src

Install the package and enable it for all Eshell buffers

#+begin_src emacs-lisp :tangle modules/eshell.el
  (use-package eshell-syntax-highlighting
    :ensure t
    :hook (eshell-mode . eshell-syntax-highlighting-mode))
#+end_src

* Popup code completion
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/completion.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/completion.el
  (use-package corfu
    :ensure t
    :config
    (setq
     corfu-auto t
     corfu-quit-no-match 'separator)
    :init
    (global-corfu-mode)
    :bind
    (:map corfu-map
	  ("SPC" . corfu-insert-separator)
	  ("C-n" . corfu-next)
	  ("C-n" . corfu-previous)))
#+end_src

Display candidate documentation or source in a popup next to the candidate menu.
#+begin_src emacs-lisp :tangle modules/completion.el
  (use-package corfu-popupinfo
    :after corfu
    :hook (corfu-mode . corfu-popupinfo-mode)
    :custom
    (corfu-popupinfo-delay '(0.25 . 0.1))
    (corfu-popupinfo-hide nil)
    :config
    (corfu-popupinfo-mode))
#+end_src

Make corfu popup come up in terminal overlay
#+begin_src emacs-lisp :tangle modules/completion.el
  (use-package corfu-terminal
    :if (not (display-graphic-p))
    :ensure t
    :config
    (corfu-terminal-mode))
#+end_src

Pretty icons for corfu
#+begin_src emacs-lisp :tangle modules/completion.el
  (use-package kind-icon
    :if (display-graphic-p)
    :ensure t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (setq kind-icon-use-icons nil) ; disable svg icons as they are fetched one by one, which is kind of stupid
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

* Projects
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/projects.el")
#+end_src

Extend the markers for the automatic project detection
#+begin_src emacs-lisp :tangle modules/projects.el
  (use-package project
    :config
    (setq project-vc-extra-root-markers '(".projectile" ".idea" ".git")))
#+end_src

* Better search
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/search.el")
#+end_src

Consult provides a nicer search, use that and rebind the standard keys to it
#+begin_src emacs-lisp :tangle modules/search.el
  (use-package consult
    :ensure t
    :bind (
	   ("C-x b" . consult-buffer)
	   ("C-s" . consult-line)))
#+end_src

* Git
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/git.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/git.el
  (use-package magit
    :ensure t
    :bind (
	   ("C-c g" . magit-status)))
#+end_src

=git-auto-commit-mode= does automatic git commits when a file changes. This is useful in a few explicit places where it is required manually. So no need to load it at startup.

#+begin_src emacs-lisp :tangle modules/git.el
  (use-package git-auto-commit-mode
    :ensure t
    :defer t)
#+end_src

Show some nice change markers on the left side of a buffer

#+begin_src emacs-lisp :tangle modules/git.el
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode +1))
#+end_src

(global-git-gutter-mode +1)

* Direnv integration
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/direnv.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/direnv.el
  (use-package envrc
    :ensure t
    :init
    (envrc-global-mode))
#+end_src

* Editorconfig integration
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/editorconfig.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/editorconfig.el
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src

* Dashboard

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/dashboard.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/dashboard.el
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-items '((recents  . 5)
			    (bookmarks . 5)
			    (projects . 5)
			    (agenda . 5))
	  dashboard-projects-backend 'project-el
	  dashboard-center-content t)
    (dashboard-setup-startup-hook))
#+end_src

* Spell checking

This will be based on flyspell for now, as that is built in. Jinx might be a valid alternative.

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/spellcheck.el")
#+end_src

Flyspell is not very smart about activation/deactivation. Copy some code from the emacswiki.

#+begin_src emacs-lisp :tangle modules/spellcheck.el
  (defun zz/flyspell-on-for-buffer-type ()
    "Enable Flyspell appropriately for the major mode of the current buffer.  Uses `flyspell-prog-mode' for modes derived from `prog-mode', so only strings and comments get checked.  All other buffers get `flyspell-mode' to check all text.  If flyspell is already enabled, does nothing."
    (interactive)
    (if (not (symbol-value flyspell-mode)) ; if not already on
	(progn
	  (if (derived-mode-p 'prog-mode)
	      (progn
		(message "Flyspell on (code)")
		(flyspell-prog-mode))
	    ;; else
	    (progn
	      (message "Flyspell on (text)")
	      (flyspell-mode 1)))
	  ;; I tried putting (flyspell-buffer) here but it didn't seem to work
	  )))

  (defun zz/flyspell-toggle ()
    "Turn Flyspell on if it is off, or off if it is on.  When turning on, it uses `flyspell-on-for-buffer-type' so code-vs-text is handled appropriately."
    (interactive)
    (if (symbol-value flyspell-mode)
	(progn ; flyspell is on, turn it off
	  (message "Flyspell off")
	  (flyspell-mode -1))
					  ; else - flyspell is off, turn it on
      (flyspell-on-for-buffer-type)))

  (defun zz/dict-english ()
    (interactive)
    (ispell-change-dictionary "english"))
  (defun zz/dict-german ()
    (interactive)
    (ispell-change-dictionary "german"))

#+end_src

According to the wiki the =find-file-hook= is a great solution to toggle flyspell, so let's hook on that.
The dictionary is set to English by default, but that can be changed with =zz/dict-german=.
=flyspell-issue-message-flag= is set to nil to increase performance, as suggested in the wiki.

#+begin_src emacs-lisp :tangle modules/spellcheck.el
  (use-package flyspell
    :config
    (setq
     ispell-dictionary "english"
     flyspell-issue-message-flag nil)
    :hook (find-file .  zz/flyspell-on-for-buffer-type))
#+end_src
* Shorten yes or no questions

Shortens yes or no questions to accept a simple y or n instead.

#+begin_src emacs-lisp :tangle init.el
  (defun yes-or-no-p-to-y-or-n-p (orig-fun &rest r)
    (cl-letf (((symbol-function 'yes-or-no-p) #'y-or-n-p))
      (apply orig-fun r)))

  (advice-add 'project-kill-buffers :around #'yes-or-no-p-to-y-or-n-p)
#+end_src

* TTY

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/tty.el")
#+end_src

Enable mouse support in TTY

#+begin_src emacs-lisp :tangle modules/tty.el
  (use-package emacs
    :hook (tty-setup . xterm-mouse-mode))
#+end_src

Make the cursor display the current evil state

#+begin_src emacs-lisp :tangle modules/tty.el
  (unless (display-graphic-p)
    (use-package evil-terminal-cursor-changer
      :ensure t
      :config
      (etcc-on)))
#+end_src

Enable copy/paste Support

#+begin_src emacs-lisp :tangle modules/tty.el
  (unless (display-graphic-p)
    (use-package clipetty
      :ensure t
      :hook (after-init . global-clipetty-mode)))
#+end_src

* Programming language support

** Syntax checking
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/syntax.el")
#+end_src

Install the package and make sure that tsx intializes properly
#+begin_src emacs-lisp :tangle modules/syntax.el
  (use-package flymake
    :defer t
    :hook (prog-mode . flymake-mode))
#+end_src

Enable diagnostics on cursor hover
#+begin_src emacs-lisp :tangle modules/syntax.el
  (use-package flymake-popon
    :ensure t
    :defer t
    :hook (flymake-mode . flymake-popon-mode))
#+end_src

** Treesitter
Treesitter offers nice syntax highlighting for supported languages.
Don't forget to install the needed grammars before doing anything.

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/treesitter.el")
#+end_src

Auto parenthesis matching and increase colors
#+begin_src emacs-lisp :tangle modules/treesitter.el
  (use-package treesit
    :config
    (customize-set-variable 'treesit-font-lock-level 4)
    :hook
    ((prog-mode . electric-pair-mode)))
#+end_src

Add a custom function to load all treesitter grammars at once
#+begin_src emacs-lisp :tangle modules/treesitter.el
  (defun zz/load-all-treesitter-grammars ()
    (interactive)
    (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist)))
#+end_src

** LSP
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/lsp.el")
#+end_src

Increase performance of eglot by improving idle time and disabling logging
#+begin_src emacs-lisp :tangle modules/lsp.el
  (use-package eglot
    :custom
    (eglot-send-changes-idle-time 0.1)
    :config
    (fset #'jsonrpc--log-event #'ignore))
#+end_src

** Bash

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/bash.el")
#+end_src

No package to install here, bash-mode already exists.
But we do have to map the major mode to treesitter mode
#+begin_src emacs-lisp :tangle modules/bash.el
  (use-package treesit
    :config
    (push '(bash-mode . bash-ts-mode) major-mode-remap-alist)
    (push '(sh-mode . bash-ts-mode) major-mode-remap-alist))
#+end_src

Add the treesitter grammar

#+begin_src emacs-lisp :tangle modules/bash.el
  (use-package treesit
    :config
    (push '(bash "https://github.com/tree-sitter/tree-sitter-bash") treesit-language-source-alist))
#+end_src

** Makefile

Not sure if this even does something, as =makefile-ts-mode= doesn't seem to exist?

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/make.el")
#+end_src

No package to install here, makefile-mode already exists.
But we do have to map the major mode to treesitter mode
#+begin_src emacs-lisp :tangle modules/make.el
  (use-package treesit
    :config
    (push '(makefile-mode . makefile-ts-mode) major-mode-remap-alist))
#+end_src

Add the treesitter grammar

#+begin_src emacs-lisp :tangle modules/make.el
  (use-package treesit
    :config
    (push '(make "https://github.com/alemuller/tree-sitter-make") treesit-language-source-alist))
#+end_src

** YAML

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/yaml.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/yaml.el
  (use-package yaml-mode
    :ensure t)
#+end_src


But we do have to map the major mode to treesitter mode
#+begin_src emacs-lisp :tangle modules/yaml.el
  (use-package treesit
    :config
    (push '(yaml-mode . yaml-ts-mode) major-mode-remap-alist))
#+end_src

Add the treesitter grammar

#+begin_src emacs-lisp :tangle modules/yaml.el
  (use-package treesit
    :config
    (push '(yaml "https://github.com/ikatyang/tree-sitter-yaml") treesit-language-source-alist))
#+end_src

** Typescript
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/typescript.el")
#+end_src

Install the package and make sure that tsx intializes properly
#+begin_src emacs-lisp :tangle modules/typescript.el
  (use-package typescript-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist (cons "\\.tsx\\'" #'tsx-ts-mode)))
#+end_src

Map the major mode to treesitter mode. The remap from =js-mode= to =js-ts-mode= doesn't work for some reason so this is done with a hook. Inefficient but works
#+begin_src emacs-lisp :tangle modules/typescript.el
  (use-package treesit
    :hook (js-mode . js-ts-mode)
    :config
    (push '(typescript-mode . typescript-ts-mode) major-mode-remap-alist)
    (push '(js-mode . js-ts-mode) major-mode-remap-alist))
#+end_src

Add the treesitter grammar

#+begin_src emacs-lisp :tangle modules/typescript.el
  (use-package treesit
    :config
    (push '(typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src") treesit-language-source-alist)
    (push '(tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src") treesit-language-source-alist))
#+end_src

** Rust
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/rust.el")
#+end_src

Map the major mode to treesitter mode
#+begin_src emacs-lisp :tangle modules/rust.el
  (use-package treesit
    :config
    (push '(rust-mode . rust-ts-mode) major-mode-remap-alist))
#+end_src

Add the treesitter grammar

#+begin_src emacs-lisp :tangle modules/rust.el
  (use-package treesit
    :config
    (push '(rust "https://github.com/tree-sitter/tree-sitter-rust" "master" "src") treesit-language-source-alist))
#+end_src

** Java
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/java.el")
#+end_src

No package to install here, java-mode already exists.
But we do have to map the major mode to treesitter mode
#+begin_src emacs-lisp :tangle modules/java.el
  (use-package treesit
    :config
    (push '(java-mode . java-ts-mode) major-mode-remap-alist))
#+end_src

Add the treesitter grammar

#+begin_src emacs-lisp :tangle modules/java.el
  (use-package treesit
    :config
    (push '(java "https://github.com/tree-sitter/tree-sitter-java") treesit-language-source-alist))
#+end_src

Fix the language server returning invalid stuff

#+begin_src emacs-lisp :tangle modules/java.el
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs '((java-ts-mode) . (eglot-eclipse-jdt "~/.local/bin/jdtls-wrapper")))
    (add-to-list 'eglot-server-programs '((java-mode) . (eglot-eclipse-jdt "~/.local/bin/usrjdtls-wrapper")))
    (defclass eglot-eclipse-jdt (eglot-lsp-server) ()
      :documentation "A wrapper for jdtls as that breaks spec")

    (cl-defmethod eglot-execute-command
      ((_server eglot-eclipse-jdt) (_cmd (eql java.apply.workspaceEdit)) arguments)
      "Eclipse JDT breaks spec and replies with edits as arguments."
      (mapc #'eglot--apply-workspace-edit arguments)))
#+end_src



** Nix

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/nix.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/nix.el
  (use-package nix-mode
    :ensure t)
#+end_src

Add =nil= language server

#+begin_src emacs-lisp :tangle modules/nix.el
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs
		 '(nix-mode . ("nil"))))
#+end_src

** Auto format
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/format.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/format.el
  (use-package format-all
    :ensure t)
#+end_src

** Markdown
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/markdown.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/markdown.el
  (use-package markdown-mode
    :ensure t)
#+end_src

** Terraform
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/terraform.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/terraform.el
  (use-package terraform-mode
    :ensure t)
#+end_src

Enable LSP integration

#+begin_src emacs-lisp :tangle modules/terraform.el
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs '(terraform-mode . ("terraform-ls" "serve"))))
#+end_src

** CSS

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/css.el")
#+end_src

No package to install here, css-mode already exists.
But we do have to map the major mode to treesitter mode
#+begin_src emacs-lisp :tangle modules/css.el
  (use-package treesit
    :config
    (push '(css-mode . css-ts-mode) major-mode-remap-alist))
#+end_src

Add the treesitter grammar

#+begin_src emacs-lisp :tangle modules/css.el
  (use-package treesit
    :config
    (push '(css "https://github.com/tree-sitter/tree-sitter-css") treesit-language-source-alist))
#+end_src

** JSON

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/json.el")
#+end_src

No package to install here, json-mode already exists.
But we do have to map the major mode to treesitter mode
#+begin_src emacs-lisp :tangle modules/json.el
  (use-package treesit
    :config
    (push '(js-json-mode . json-ts-mode) major-mode-remap-alist))
#+end_src

Add the treesitter grammar

#+begin_src emacs-lisp :tangle modules/json.el
  (use-package treesit
    :config
    (push '(json "https://github.com/tree-sitter/tree-sitter-json") treesit-language-source-alist))
#+end_src

Enable LSP for the treesitter mode

#+begin_src emacs-lisp :tangle modules/terraform.el
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs '(json-ts-mode . ("vscode-json-languageserver" "--stdio"))))
#+end_src

** ASIIDOC

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/asiidoc.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/asiidoc.el

  (defun zz/plantuml-indent-all-lines ()
    (interactive)
    (goto-char (point-min))
    (while (not (eobp))
      (plantuml-indent-line)
      (forward-line 1)))

  (use-package adoc-mode
    :ensure t)

  (use-package plantuml-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist (cons (purecopy "\\.puml\\'") 'plantuml-mode)))
#+end_src

** Go
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/go.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/go.el
  (use-package go-mode
    :hook (go-ts-mode . eglot-ensure)
    :ensure t)
#+end_src

Map the major mode to treesitter mode
#+begin_src emacs-lisp :tangle modules/go.el
  (use-package treesit
    :config
    (push '(go-mode . go-ts-mode) major-mode-remap-alist))
#+end_src

Add the treesitter grammar

#+begin_src emacs-lisp :tangle modules/go.el
  (use-package treesit
    :config
    (push '(go "https://github.com/tree-sitter/tree-sitter-go" "master" "src") treesit-language-source-alist)
    (push '(gomod "https://github.com/camdencheek/tree-sitter-go-mod" "main" "src") treesit-language-source-alist))
#+end_src

** Docker
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/docker.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/docker.el
  (use-package dockerfile-mode
    :ensure t)
#+end_src

Map the major mode to treesitter mode
#+begin_src emacs-lisp :tangle modules/docker.el
  (use-package treesit
    :config
    (push '(dockerfile-mode . dockerfile-ts-mode) major-mode-remap-alist))
#+end_src

Add the treesitter grammar

#+begin_src emacs-lisp :tangle modules/docker.el
  (use-package treesit
    :config
    (push '(dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile" "main" "src") treesit-language-source-alist))
#+end_src

** Groovy

#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/groovy.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/groovy.el
  (use-package groovy-mode
    :ensure t)
#+end_src

Enable LSP integration

#+begin_src emacs-lisp :tangle modules/terraform.el
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs '(groovy-mode . ("groovy-language-server"))))
#+end_src

** Make braces easier to follow
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/braces.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/braces.el
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    :ensure t)
#+end_src

** Auto completion snippets
#+begin_src emacs-lisp :tangle init.el
  (zz/load-module "modules/snippets.el")
#+end_src

#+begin_src emacs-lisp :tangle modules/snippets.el
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+end_src

Provide some curated snippets to get started
#+begin_src emacs-lisp :tangle modules/snippets.el
  (use-package yasnippet-snippets
    :ensure t)
#+end_src

Consult plugin for yasnippet
#+begin_src emacs-lisp :tangle modules/snippets.el
  (use-package consult-yasnippet
    :ensure t)
#+end_src

CAPF support so that corfu picks yasnippet up
#+begin_src emacs-lisp :tangle modules/snippets.el
  (use-package yasnippet-capf
    :ensure t
    :config
    (add-to-list 'completion-at-point-functions #'yasnippet-capf))
#+end_src
